-- Load Venyx UI
local Venyx = loadstring(game:HttpGet("https://raw.githubusercontent.com/Aki315/heh/refs/heads/main/ui%20library106"))()
local ui = Venyx.new("Dungeon Quest Script", 5012544693) -- Change to your UI title and icon ID

-- Services
local HttpService = game:GetService("HttpService")

-- Directory and Config File
local configDirectory = "Configs"
local configFile = configDirectory .. "/walkSpeedConfig.txt"

-- Default Config
local config = {
    walkSpeedEnabled = false,
    walkSpeed = 16, -- Default Roblox character walk speed
    autoLoadConfig = true, -- Toggle auto-load config
    infiniteRaidEnabled = false,
    selectedRaid = "Hela Raid",
    selectedTier = 1,
    RemoveVFXEnabled = false, -- Existing config
    AutobonusBossEnabled = false, -- Add this
    AutoRetryEnabled = false, 
    HideUIEnabled = false

}

-- Ensure Directory and File Exists
local function ensureConfigFile()
    if not isfolder(configDirectory) then
        makefolder(configDirectory)
    end
    if not isfile(configFile) then
        writefile(configFile, HttpService:JSONEncode(config))
    end
end

-- Save Config
local function saveConfig()
    local success, errorMessage = pcall(function()
        writefile(configFile, HttpService:JSONEncode(config))
    end)
    if success then
        
    else
        
    end
end

-- Load Config
local function loadConfig()
    local success, data = pcall(function()
        return readfile(configFile)
    end)
    if success then
        config = HttpService:JSONDecode(data)
    else
        saveConfig() -- Save default config if no file exists
    end
end

-- Apply Walk Speed
local function applyWalkSpeed()
    local player = game:GetService("Players").LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.WalkSpeed = config.walkSpeedEnabled and config.walkSpeed or 16
    end
end

-- Ensure Config File Exists on Start
ensureConfigFile()

-- Load Config at Start if Auto-Load is Enabled
if config.autoLoadConfig then
    loadConfig()
    applyWalkSpeed()
end

-- Tabs and Pages
local mainPage = ui:addPage("Main", 5012544693)
local AntilagPage = ui:addPage("Antilag", 5012544693)
local configPage = ui:addPage("Config(Testing)", 5012544693)



-- Main Page Section
local mainSection = mainPage:addSection("Walk Speed Settings")

-- Function to apply the configured walk speed to the player's character
local function applyWalkSpeed()
    local player = game.Players.LocalPlayer
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.WalkSpeed = config.walkSpeed
    end
end

-- Listen for character respawn to reapply walk speed
local function setupCharacterListener()
    local player = game.Players.LocalPlayer
    player.CharacterAdded:Connect(function(character)
        character:WaitForChild("Humanoid") -- Wait for the humanoid to load
        if config.walkSpeedEnabled then
            applyWalkSpeed()
        end
    end)
end

-- Initialize character listener
setupCharacterListener()

-- Toggle for enabling/disabling walk speed
mainSection:addToggle("Enable Walk Speed", config.walkSpeedEnabled, function(state)
    config.walkSpeedEnabled = state
    saveConfig()
    if state then
        applyWalkSpeed()
    end
end)

-- Textbox for setting walk speed
mainSection:addTextbox("Walk Speed", tostring(config.walkSpeed), function(value)
    local newWalkSpeed = tonumber(value)
    if newWalkSpeed and newWalkSpeed >= 16 and newWalkSpeed <= 100 then
        config.walkSpeed = newWalkSpeed
        saveConfig()
        if config.walkSpeedEnabled then
            applyWalkSpeed()
        end
    else
        warn("Invalid Walk Speed value. Please enter a number between 16 and 100.")
    end
end)

-- Apply walk speed on script startup if enabled
if config.walkSpeedEnabled then
    applyWalkSpeed()
end



-- Infinite Raid Logic
local function startInfiniteRaid()
    local args = {
        [1] = {
            [1] = {
                [1] = "\1",
                [2] = {
                    ["\3"] = "PlaySolo",
                    ["partyData"] = {
                        ["difficulty"] = "Nightmare",
                        ["mode"] = "Normal",
                        ["dungeonName"] = config.selectedRaid,
                        ["tier"] = config.selectedTier
                    }
                }
            },
            [2] = "c"
        }
    }

    -- Trigger Raid Start
    game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
    game:GetService("ReplicatedStorage").remotes.changeStartValue:FireServer()
end

local raidLoopThread

-- Function to Start the Infinite Raid Loop
local function startRaidLoop()
    raidLoopThread = game:GetService("RunService").Heartbeat:Connect(function()
        if config.infiniteRaidEnabled then
            startInfiniteRaid()
            wait(5) -- Wait before triggering the raid again (adjust as needed)
        else
            raidLoopThread:Disconnect() -- Stop the loop when toggled off
        end
    end)
end

-- Main Page - Infinite Raid Settings
mainSection:addToggle("Infinite Raid", config.infiniteRaidEnabled, function(value)
    config.infiniteRaidEnabled = value
    saveConfig()

    -- If enabled, start the raid loop
    if value then
        print("Infinite Raid Enabled")
        startRaidLoop()  -- Start the raid loop when toggled on
    else
        print("Infinite Raid Disabled")
        if raidLoopThread then
            raidLoopThread:Disconnect() -- Stop the loop when toggled off
        end
    end
end)

mainSection:addDropdown("Raids", {"Hela Raid", "Goliath Raid"}, function(selection)
    config.selectedRaid = selection
    saveConfig()
    print("Selected Raid:", selection)
end)

mainSection:addDropdown("Tier", {1, 2, 3, 4, 5}, function(selection)
    config.selectedTier = selection
    saveConfig()
    print("Selected Tier:", selection)
end)

-- Automatically start the raid loop if the Infinite Raid toggle is enabled
if config.infiniteRaidEnabled then
    print("Infinite Raid was enabled on startup, starting loop...")
    startRaidLoop()
end

-- Abyssal Void Farm Section
local mainSection = mainPage:addSection("Abyssal Void Farm")

-- Variables to control the loop
local autoSkillEnabled = false
local autoSkillThread

-- Universal Heal Function
local function activateUniversalHeal()
    local universalHeal = game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Universal Heal")
    if universalHeal and universalHeal:FindFirstChild("abilityEvent") then
        for i = 1, 50 do
            universalHeal.abilityEvent:FireServer() -- Fire the event 50 times
    
        end
    else

    end
end

-- Ground Stomp Function
local function activateGroundStomp()
    local groundStomp = game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Ground Stomp")
    if groundStomp and groundStomp:FindFirstChild("spellEvent") then
        for i = 1, 50 do
            groundStomp.spellEvent:FireServer() -- Fire the event 50 times

        end
    else

    end
end

-- Function to manage the loop
local function autoSkillLoop()
    while autoSkillEnabled do
        activateUniversalHeal()
        activateGroundStomp()
        task.wait(1) -- Interval between each activation cycle
    end
end

-- Toggle to enable/disable the loop
mainSection:addToggle("Enable Auto Skill", autoSkillEnabled, function(state)
    autoSkillEnabled = state

    if autoSkillEnabled then

        autoSkillThread = task.spawn(autoSkillLoop) -- Start the loop
    else

        if autoSkillThread then
            task.cancel(autoSkillThread) -- Stop the loop
        end
    end
end)
      -- Auto bonusBoss Section (Modified for loop and config saving)
local autoBonusBossEnabled = config.AutobonusBossEnabled  -- Use saved config

-- Function to activate Auto bonusBoss
local function activateAutoBonusBoss()
    local args = {
            [1] = {
                [1] = {
                    ["\3"] = "vote",
                    ["vote"] = "bonus"
                },
                [2] = "/"
            }
        }
        game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
end

-- Loop function for Auto bonusBoss
local function autoBonusBossLoop()
    while autoBonusBossEnabled do
        activateAutoBonusBoss()
        task.wait(5) -- Adjust the interval as needed (e.g., retry every 5 seconds)
        if not autoBonusBossEnabled then
            return -- Stop the loop when autoBonusBossEnabled is false
        end
    end
end


-- Toggle for Auto bonusBoss in UI
mainSection:addToggle("Auto bonusBoss", autoBonusBossEnabled, function(value)
    autoBonusBossEnabled = value  -- Set autoBonusBossEnabled to true or false based on toggle

    -- Save the config when toggled
    config.AutobonusBossEnabled = value
    saveConfig()

    if autoBonusBossEnabled then
        print("Auto bonusBoss Enabled")
        task.spawn(autoBonusBossLoop) -- Start the loop
    else
        print("Auto bonusBoss Disabled")
        -- Optionally stop the loop here if needed (though it will automatically stop when the toggle is off)
    end
end)

-- Start Auto bonusBoss loop on startup if enabled
if autoBonusBossEnabled then
    print("Auto bonusBoss was enabled on startup, starting loop...")
    task.spawn(autoBonusBossLoop)
end
       -- Auto Retry Section (Similar to Auto bonusBoss)
local autoRetryEnabled = config.AutoRetryEnabled  -- Use saved config for Auto Retry

-- Function to trigger Auto Retry
local function activateAutoRetry()
    local args = {
        [1] = {
            [1] = {
                ["\3"] = "vote",
                ["vote"] = true
            },
            [2] = "/"
        }
    }
    game:GetService("ReplicatedStorage"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
end

-- Loop function for Auto Retry
local function autoRetryLoop()
    while autoRetryEnabled do
        activateAutoRetry()
        task.wait(5) -- Adjust the interval as needed (e.g., retry every 5 seconds)
        if not autoRetryEnabled then
            return -- Stop the loop when autoRetryEnabled is false
        end
    end
end


-- Toggle for Auto Retry in UI
mainSection:addToggle("Auto Retry", autoRetryEnabled, function(value)
    autoRetryEnabled = value  -- Set autoRetryEnabled to true or false based on toggle

    -- Save the config when toggled
    config.AutoRetryEnabled = value
    saveConfig()

    if autoRetryEnabled then
        print("Auto Retry Enabled")
        task.spawn(autoRetryLoop) -- Start the loop for retry
    else
        print("Auto Retry Disabled")
        -- When the toggle is off, stop the loop by calling a condition in the loop
        -- The loop will exit once `autoRetryEnabled` is false
    end
end)


-- Start Auto Retry loop on startup if enabled
if autoRetryEnabled then
    task.spawn(autoRetryLoop)
end

-- Antilag Section for Boosting FPS
local AntilagSection = AntilagPage:addSection("Antilag / Boost FPS")
AntilagSection:addButton("Button", function()
    local Terrain = workspace:FindFirstChildOfClass('Terrain')
    local Lighting = game:GetService("Lighting")
    local RunService = game:GetService("RunService")

    -- Set Terrain water properties
    if Terrain then
        Terrain.WaterWaveSize = 0
        Terrain.WaterWaveSpeed = 0
        Terrain.WaterReflectance = 0
        Terrain.WaterTransparency = 0
    end

    -- Disable global lighting effects
    Lighting.GlobalShadows = false
    Lighting.FogEnd = 9e9
    settings().Rendering.QualityLevel = 1

    -- Adjust materials, reflectance, and other properties of in-game objects
    for i, v in pairs(game:GetDescendants()) do
        if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
            v.Material = Enum.Material.Plastic
            v.Reflectance = 0
        elseif v:IsA("Decal") then
            v.Transparency = 1
        elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
            v.Lifetime = NumberRange.new(0)
        elseif v:IsA("Explosion") then
            v.BlastPressure = 1
            v.BlastRadius = 1
        end
    end

    -- Disable post-processing effects in Lighting
    for i, v in pairs(Lighting:GetDescendants()) do
        if v:IsA("BlurEffect") or v:IsA("SunRaysEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("BloomEffect") or v:IsA("DepthOfFieldEffect") then
            v.Enabled = false
        end
    end

    -- Listen for new objects being added to the workspace and clean up certain effects
    workspace.DescendantAdded:Connect(function(child)
        task.spawn(function()
            if child:IsA('ForceField') then
                RunService.Heartbeat:Wait()
                child:Destroy()
            elseif child:IsA('Sparkles') then
                RunService.Heartbeat:Wait()
                child:Destroy()
            elseif child:IsA('Smoke') or child:IsA('Fire') then
                RunService.Heartbeat:Wait()
                child:Destroy()
            end
        end)
    end)
end)

-- Antilag Section for Removing Hands
local AntilagSection = AntilagPage:addSection("Remove Hands")
AntilagSection:addButton("Button", function()
    local player = game.Players.LocalPlayer

    -- Function to ensure a part is destroyed
    local function ensureDestroyed(character, partName)
        local part = character:FindFirstChild(partName)
        while part do
            part:Destroy()
            task.wait(0.1) -- Small delay to ensure the part is properly destroyed
            part = character:FindFirstChild(partName)
        end

    end
    
    -- Function to handle character setup
    local function onCharacterAdded(character)
        -- Wait for the character to fully load
        character:WaitForChild("LeftHand")
        character:WaitForChild("RightHand")
    
        -- Ensure LeftHand and RightHand are destroyed
        ensureDestroyed(character, "LeftHand")
        ensureDestroyed(character, "RightHand")
    end
    
    -- Connect to the CharacterAdded event
    player.CharacterAdded:Connect(onCharacterAdded)
    
    -- Handle the current character if it already exists
    if player.Character then
        onCharacterAdded(player.Character)
    end
end)

-- Antilag Section for Remove VFX
local AntilagSection = AntilagPage:addSection("Remove VFX")
local loopEnabled = config.RemoveVFXEnabled  -- Initialize based on saved config

local function deletePartsAndModels()
    local targetParts = {"Mighty Leap Slam Circle", "groundAura"}
    local targetModelClass = "Universal Heal"
    
    while loopEnabled do
        -- Delete up to 350 parts and models
        for i = 1, 350 do
            -- Delete parts
            for _, targetName in ipairs(targetParts) do
                local part = workspace:FindFirstChild(targetName)
                if part then
                    part:Destroy()
                end
            end

            -- Delete Universal Heal models
            local model = workspace:FindFirstChild(targetModelClass)
            if model and model:IsA("Model") then
                model:Destroy()
            end
        end

        task.wait() -- Allow other processes to run and prevent high CPU usage
    end
end

AntilagSection:addToggle("Toggle", loopEnabled, function(value)
    loopEnabled = value  -- Set loopEnabled to true or false based on toggle

    -- Save the config when toggled
    config.RemoveVFXEnabled = value
    saveConfig()

    if loopEnabled then
        task.spawn(deletePartsAndModels) -- Start removing VFX if enabled
    end
end)

-- Start VFX removal on startup if enabled
if config.RemoveVFXEnabled then
    loopEnabled = true
    task.spawn(deletePartsAndModels)
end

-- Antilag Section for HideUI
local AntilagSection = AntilagPage:addSection("Hide Name, Lvl, Pic")
local hideUILoopEnabled = config.HideUIEnabled -- Initialize based on saved config

-- Utility function to find a child at a given path
local function findPath(parent, ...)
    local current = parent
    for _, name in ipairs({...}) do
        if current and current:FindFirstChild(name) then
            current = current[name]
        else
            return nil
        end
    end
    return current
end

-- Function to find a character in the workspace
local function findCharacter()
    for _, obj in ipairs(workspace:GetChildren()) do
        if obj:IsA("Model") and obj:FindFirstChild("Head") and obj:FindFirstChild("Humanoid") then
            return obj
        end
    end
    return nil
end

-- Function to update PlayerName, Level, XP, and Portrait
local function updatePlayerInfo()
    local player = game:GetService("Players").LocalPlayer

    -- Paths for PlayerName, Level.TextLabel, Portrait ImageLabel, and XP TextLabel
    local playerNamePath = findPath(player.PlayerGui, "HUD", "Main", "PlayerStatus", "PlayerStatus", "PlayerName")
    local levelPath = findPath(player.PlayerGui, "HUD", "Main", "PlayerStatus", "PlayerStatus", "Level", "TextLabel")
    local portraitPath = findPath(player.PlayerGui, "HUD", "Main", "PlayerStatus", "PlayerStatus", "Portrait", "Frame", "ImageLabel")
    local xpPath = findPath(player.PlayerGui, "HUD", "Main", "PlayerStatus", "PlayerStatus", "XP", "BarFrame", "TextLabel")

    -- Change PlayerName text
    if playerNamePath then
        playerNamePath.Text = "Sezemi Hub"
    end

    -- Change Level text
    if levelPath then
        levelPath.Text = "inf"
    end

    -- Change Portrait Image to none
    if portraitPath then
        portraitPath.Image = "" -- Removes the image
    end

    -- Change XP text
    if xpPath then
        xpPath.Text = "inf/inf"
    end
end

-- Function to update PlayerName and Level in the workspace character
local function updateCharacterInfo()
    local character = findCharacter()
    if character then
        local head = character:FindFirstChild("Head")
        if head and head:FindFirstChild("playerNameplate") then
            local playerNameplate = head.playerNameplate
            if playerNameplate:FindFirstChild("PlayerName") then
                playerNameplate.PlayerName.Text = "Sezemi Hub"
            end
            if playerNameplate:FindFirstChild("Level") then
                playerNameplate.Level.Text = "inf"
            end
        end
    end
end

-- Function to run the Hide UI logic in a loop
local function hideUIElements()
    while hideUILoopEnabled do
        updatePlayerInfo()
        updateCharacterInfo()
        task.wait(1) -- Wait before repeating to reduce CPU usage
    end
end

-- Toggle for HideUI in the Antilag Section
AntilagSection:addToggle("Toggle", hideUILoopEnabled, function(value)
    hideUILoopEnabled = value -- Update the loop status

    -- Save the updated state to the configuration
    config.HideUIEnabled = value
    saveConfig()

    if hideUILoopEnabled then
        print("Hide UI Enabled")
        task.spawn(hideUIElements) -- Start hiding UI in a separate thread
    else
        print("Hide UI Disabled")
    end
end)

-- Automatically start the HideUI loop on startup if it was enabled
if config.HideUIEnabled then
    print("Hide UI was enabled on startup, starting loop...")
    task.spawn(hideUIElements)
end


-- Config Page Section
local configSection = configPage:addSection("Dont Touch Anything Here")

configSection:addButton("Save Config", function()
    saveConfig()
end)

configSection:addButton("Load Config", function()
    loadConfig()
    applyWalkSpeed()

end)

configSection:addToggle("Auto Load Config", config.autoLoadConfig, function(state)
    config.autoLoadConfig = state
    saveConfig()
end)


-- Select the default page on startup
ui:SelectPage(ui.pages[1], true)


-- Create a ScreenGui to hold the toggle button
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ToggleScreenGui"
screenGui.Parent = game.CoreGui -- Add to CoreGui

-- Create the ToggleSquare button
local toggleSquare = Instance.new("ImageButton")
toggleSquare.Name = "ToggleSquare"
toggleSquare.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
toggleSquare.Size = UDim2.new(0, 45, 0, 45) -- Adjust size
toggleSquare.Position = UDim2.new(0.00100000005, 0, 0.5, 0) -- Adjust position
toggleSquare.Image = "" -- Optional: Add an image here if needed
toggleSquare.Parent = screenGui -- Add the button to ScreenGui

-- Add a label to the ToggleSquare
local label = Instance.new("TextLabel")
label.Name = "ToggleLabel"
label.Size = UDim2.new(1, 0, 1, 0) -- Fit inside the button
label.BackgroundTransparency = 1 -- Transparent background
label.Font = Enum.Font.GothamBold
label.Text = "Hide/Open" -- Display the toggle character
label.TextColor3 = Color3.fromRGB(0, 0, 0) -- Black text
label.TextSize = 14
label.Parent = toggleSquare -- Attach to the button

-- Function to find the Main UI frame
local function findMainUI()
    for _, gui in ipairs(game.CoreGui:GetChildren()) do
        if gui:IsA("ScreenGui") and gui.Name == "Dungeon Quest Script" then -- Update with your UI name
            return gui
        end
    end
    return nil
end

-- Toggle visibility of Main UI
toggleSquare.MouseButton1Click:Connect(function()
    local mainUI = findMainUI()
    if mainUI then
        mainUI.Enabled = not mainUI.Enabled -- Toggle visibility of the main UI
    else

    end
end)



